#pragma checksum "/home/fabio/Documenti/Emadema/dotnNet_prj/loocDev/LoocERP/Views/Users/IndexExt.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "68e4c53fe4bdacc9c90482b19c2678e474d4d440"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Users_IndexExt), @"mvc.1.0.view", @"/Views/Users/IndexExt.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/home/fabio/Documenti/Emadema/dotnNet_prj/loocDev/LoocERP/Views/_ViewImports.cshtml"
using LoocERP;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/home/fabio/Documenti/Emadema/dotnNet_prj/loocDev/LoocERP/Views/_ViewImports.cshtml"
using LoocERP.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/home/fabio/Documenti/Emadema/dotnNet_prj/loocDev/LoocERP/Views/_ViewImports.cshtml"
using DevExtreme.AspNet.Mvc;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"68e4c53fe4bdacc9c90482b19c2678e474d4d440", @"/Views/Users/IndexExt.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a0e64de071199ae55fa1bfd96ad5ab02ba5443b9", @"/Views/_ViewImports.cshtml")]
    public class Views_Users_IndexExt : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/theme/plugins/jsgrid/jsgrid.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/theme/plugins/jsgrid/jsgrid-theme.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/theme/plugins/tabulator/css/semantic-ui/tabulator_semantic-ui.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "/home/fabio/Documenti/Emadema/dotnNet_prj/loocDev/LoocERP/Views/Users/IndexExt.cshtml"
  
    ViewData["Title"] = "Risorsa";
    if (ViewBag.type == 0 || ViewBag.type == 1 || ViewBag.type == 2)
    {
        ViewData["Title"] = "Risorse Interne";
    }
    else if (ViewBag.type == 3 || ViewBag.type == 4 || ViewBag.type == 5)
    {
        ViewData["Title"] = "Risorse Esterne";
    }

#line default
#line hidden
#nullable disable
            WriteLiteral("\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "68e4c53fe4bdacc9c90482b19c2678e474d4d4405212", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "68e4c53fe4bdacc9c90482b19c2678e474d4d4406310", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "68e4c53fe4bdacc9c90482b19c2678e474d4d4407408", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"


<!--Export stuff-->
<script type=""text/javascript"" src=""https://oss.sheetjs.com/sheetjs/xlsx.full.min.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.10.1/polyfill.min.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.8.0/exceljs.min.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js""></script>





<div>&nbsp;</div>
<section class=""content"">
    <div class=""row"">
        <div class=""col-12"">
            <div class=""card card-primary"">
                <!-- /.card-header -->
                <div class=""card-body"">
                    <div class=""col-12"">

                        ");
#nullable restore
#line 37 "/home/fabio/Documenti/Emadema/dotnNet_prj/loocDev/LoocERP/Views/Users/IndexExt.cshtml"
                    Write( 
                            Html.DevExtreme().DataGrid() 
                            //.Selection(s => s.Mode(SelectionMode.Multiple).ShowCheckBoxesMode(GridSelectionShowCheckBoxesMode.Always))
                            .ID("userGridContainer")
                            .Export(e => e.Enabled(true))
                            .OnExporting("exporting")
                            .ShowBorders(true)
                            .RowAlternationEnabled(true)
                            .ColumnChooser(c => c.Enabled(true))
                            //.HeaderFilter(headerFilter => headerFilter.Visible(true)) 
                            .AllowColumnReordering(true)
                            .AllowColumnResizing(true)
                            .ColumnAutoWidth(true)
                            .HoverStateEnabled(true)
                            //.Grouping(grouping => grouping.AutoExpandAll(true))
                            //.GroupPanel(groupPanel => groupPanel.Visible(true))
                            .Paging(paging => paging.PageSize(15))
                            .Pager(pager => {
                                pager.Visible(true);
                                pager.DisplayMode(GridPagerDisplayMode.Full);
                                pager.ShowPageSizeSelector(true);
                                pager.AllowedPageSizes(new JS("[30, 50, 'all']"));
                                pager.ShowInfo(true);
                                pager.ShowNavigationButtons(true);
                            })                            
                            .FilterRow(filterRow => filterRow
                                .Visible(true)
                                .ApplyFilter(GridApplyFilterMode.Auto)
                            )
                            .SearchPanel(searchPanel => searchPanel
                                .Visible(true)
                                .Width(240)
                                .Placeholder("Cerca...")
                            )
                            .DataSource(ds => ds.Mvc()
                                .Controller("Users")
                                .LoadAction("GetUsers")
                                .Key("Id")
                            )
                            .RemoteOperations(true)
                            .Columns(columns => {
                                 columns.Add().Caption("Codice").Width(130)
                                 .DataField("InternalCode").DataType(GridColumnDataType.String).AllowGrouping(false);

                                 columns.Add().Caption("Cognome").SortOrder(SortOrder.Asc)
                                 .DataField("LastName").DataType(GridColumnDataType.String).AllowGrouping(false);

                                 columns.Add().Caption("Nome")
                                 .DataField("FirstName").DataType(GridColumnDataType.String).AllowGrouping(false);

                                 columns.Add().Caption("Telefono")
                                 .DataField("PhoneNumber").DataType(GridColumnDataType.String).AllowGrouping(false);

                                 columns.Add().Caption("Città")
                                 .DataField("Citta").DataType(GridColumnDataType.String);
                                
                                columns.Add().Caption("Mansioni").DataField("Mansioni").DataType(GridColumnDataType.String)
                                .CalculateCellValue("calculateMansioniCellValue").AllowSorting(false);


                                 columns.Add().Caption("Contratto").Alignment(HorizontalAlignment.Center).Columns (col => {
                                    col.Add().Caption("Stato").DataField("contract.Stato")
                                    .DataType(GridColumnDataType.Number)
                                    .Lookup(lookup => lookup.DataSource(new JS("statiContratto"))                
                                                                        .ValueExpr("Value")
                                                                        .DisplayExpr("Text")
                                                                        )
                                    .CellTemplate(new JS("checkStato"));

                                    col.Add().Caption("Dal").DataField("contract.ValidFrom").Format("dd/M/yyyy")
                                    .DataType(GridColumnDataType.Date);

                                    col.Add().Caption("Al").DataField("contract.ValidTo").Format("dd/M/yyyy")
                                    .DataType(GridColumnDataType.Date);
                                 });


                                 /*.CustomizeText(
                                            @<text>
                                                function(data, row){
                                                    console.log(row);
                                                    
                                                }
                                            </text>
                                 )
                                 .CalculateCellValue(
                                            @<text>
                                                function(data){
                                                    if (data.contract) {
                                                        if (data.contract.Stato == 1) {
                                                            return "Eccomi";
                                                        }
                                                    }
                                                    
                                                }
                                            </text>);*/

                            })
                            /*.Columns(columns => {
                                columns.AddFor(m => m.InternalCode).Caption("Codice").AllowGrouping(false);   
                                columns.AddFor(m => m.LastName).Caption("Cognome");
                                columns.AddFor(m => m.FirstName).Caption("Nome");
                                columns.AddFor(m => m.PhoneNumber).Caption("Telefono");
                                columns.AddFor(m => m.).Caption("Telefono");
                                columns.AddFor(m => m.Citta).Caption("Città");
                                columns.AddFor(m => m.DataNascita).Caption("Data Nascita").DataType(GridColumnDataType.Date).Alignment(HorizontalAlignment.Right).Width(180);  
                                columns.AddFor(m => m.ANA_Company.RagioneSociale).Caption("Mittente"); 
                                columns.AddFor(m => m.DataCreazione).Caption("Data ricezione").Format("dd/M/yyyy").Alignment(HorizontalAlignment.Right).Width(180); 
                                columns.AddFor(m => m.Importo).Caption("Importo"); 
                                columns.Add()
                                .Caption("Operazioni")
                                        .Type(GridCommandColumnType.Buttons)
                                            .Buttons(b => {
                                                b.Add().Icon("far fa-file-alt").Hint("Apri documento").OnClick("viewInvoice");
                                                b.Add().Icon("fas fa-file-pdf text-danger").Hint("Scarica PDF").OnClick("pdfDownload");
                                                b.Add().Icon("far fa-file-code").Hint("Scarica XML").OnClick("xmlDownload");
                                            });

                                columns.Add()
                                .Caption("XXXXXXXX")  
                                .CellTemplate(@<text>
                                                @(Html.DevExtreme().Button()
                                                        .Icon("far fa-file-alt")
                                                        .Type(ButtonType.Success)
                                                        .Width(40)
                                                        )
                                                @(Html.DevExtreme().Button()
                                                        .Icon("far fa-file-alt")
                                                        .Type(ButtonType.Success)
                                                        .Text("Apri DDT")
                                                        .OnClick("function(e) { onDelete(e, data) }")  
                                                        )
                                                </text>);

                            }
                            )*/
                               /*columns.Add()
                                        .Caption("Tipologia")
                                        .Width(230)
                                        .CalculateCellValue(
                                            @<text>
                                                function(data){
                                                    if (data.Suffisso == null) return '-';
                                                    if (data.Suffisso == 'S') return " DDT di scarico";
                                                    if (data.Suffisso == 'T') return " DDT di trasferimento";
                                                }
                               </text>);*/

                          

                        );

#line default
#line hidden
#nullable disable
            WriteLiteral(@"



                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<style>
  
    #gridContainer .dx-datagrid-headers .dx-header-row {
        background-color: rgb(154 201 255 / 60%);
    }
       
    /*.dx-header-row {
        color: white;
    }*/

    #gridContainer .dx-datagrid-headers .dx-header-row {
        background-color: #507CD1;
    }

    #gridContainer .dx-datagrid-header-panel {
        padding: 0;
        background-color: rgb(154 201 255 / 60%);
        border-radius: 5px 5px 0px 0px;
    }

    #gridContainer .dx-datagrid-header-panel .dx-toolbar {
        margin: 0;
        padding-right: 20px;
        background-color: transparent;
    }

    #gridContainer .dx-datagrid-header-panel .dx-toolbar-items-container {
        height: 70px;
    }

    #gridContainer .dx-datagrid-header-panel .dx-toolbar-before .dx-toolbar-item:not(:first-child) {
        background-color: rgba(103, 171, 255, 0.6);
    }

    #gridContainer .dx-datagrid-header-panel .dx");
            WriteLiteral(@"-toolbar-before .dx-toolbar-item:last-child {
        padding-right: 10px;
    }

    #gridContainer .dx-datagrid-header-panel .dx-selectbox {
        margin: 17px 10px;
    }

    #gridContainer .dx-datagrid-header-panel .dx-button {
        margin: 17px 0;
    }

    #gridContainer .informer {
        height: 70px;
        width: 130px;
        text-align: center;
        color: #fff;
    }

    #gridContainer .count {
        padding-top: 15px;
        line-height: 27px;
        font-size: 28px;
        margin: 0;
        font-weight: normal;
        font-family: ""Helvetica Neue"", ""Segoe UI"", Helvetica, Verdana, sans-serif;
    }

    .form-container {
        padding: 20px;
    }

    ​
    .address-form label {
        font-weight: bold;
    }
</style>
");
            DefineSection("Scripts", async() => {
                WriteLiteral(@" 
    <script>

        var prevGrid = null;

        var statiContratto = [
          {
              ""Value"" : 0,
              ""Text""  : ""Chiuso""
          },
            {
              ""Value"" : 1,
              ""Text""  : ""In corso""
            }
        ];


    function calculateMansioniCellValue(data) {
        var res = [];
        for (var i = 0; i < data.Mansioni.length; i++)
            res.push(data.Mansioni[i].Descrizione);
        return res.join(', ');
    }

    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('Risorse interne');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'RisorseWHR.xlsx');
            });
        });
        e.cancel = tru");
                WriteLiteral(@"e;
    }
        function checkStato(cella,row,e){

            if (row.data.contract !== null) {

                var dal = """";
                var al = """";
                if (row.data.contract.Stato == 0)   cella.html('<span class=""badge badge-warning"">Contratto chiuso </span>');
                if (row.data.contract.Stato == 1)   cella.html('<span class=""badge badge-success"">In corso </span>');
                if (row.data.contract.ValidFrom !== null) {
                    dal = new Date(row.data.contract.ValidFrom).toLocaleDateString('it-IT', {});
                }   
                if (row.data.contract.ValidTo !== null) {
                    al = new Date(row.data.contract.ValidTo).toLocaleDateString('it-IT', {});
                }  

            }
        }


       function exportPDF() {
            var doc = new jsPDF();
            var dataGrid = $(""#userGridContainer"").dxDataGrid(""instance"");
            DevExpress.pdfExporter.exportDataGrid({
                jsPDFDocument: doc,
                c");
                WriteLiteral("omponent: dataGrid\n            }).then(function() {\n                doc.save(\"Customers.pdf\");\n        });\n    }\n\n    </script>\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
