@model LoocERP.ViewModels.EditCompanyViewModel
@{
    ViewData["Title"] = "Azienda - Aggiornamento";
    ViewData["Back"] = "Aziende Interne";
    if (Model.isExternal)
    {
        ViewData["Back"] = "Aziende Esterne";
    }
}
<div>&nbsp;</div>
<link rel="stylesheet" href="~/theme/plugins/jsgrid/jsgrid.min.css">
<link rel="stylesheet" href="~/theme/plugins/jsgrid/jsgrid-theme.min.css">
<link href="~/theme/plugins/tabulator/css/semantic-ui/tabulator_semantic-ui.min.css" rel="stylesheet">
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/v/dt/dt-1.10.18/datatables.min.css" />

<!--Export stuff-->
<script type="text/javascript" src="https://oss.sheetjs.com/sheetjs/xlsx.full.min.js"></script>

<section class="content">    
    <div class="col-12 row">
        <div class="col-4">
            @if (@Model.Company.ParentID != null)
            {
                <div class="card col-12 p-0">
                    <div class="card-body">
                        <a class="btn-sm" href="/Companies/edit?id=@Model.Company.Parent.ID"><i class="fa fa-chevron-circle-left"></i> Torna a <b>@Model.Company.Parent.RagioneSociale</b></a>
                    </div>
                </div>
            }
            else
            {
                <div class="card col-12 p-0">
                    <div class="card-body">
                        <a class="btn-sm" href="/Companies?isExternal=@Model.isExternal"><i class="fa fa-chevron-circle-left"></i> Torna a <b>@ViewData["Back"]</b></a>
                    </div>
                </div>
            }
            <div class="card card-primary">
                <div class="accordion" id="accordionExample">
                    <div class="card-header" id="headingOne">
                        <h2 class="mb-0">
                            <img class="circle_icon" src="/Companies/getCompanyPicture?id=@Model.Company.ID&r=@(Guid.NewGuid())" height="60" />
                            <button class="btn btn-link" type="button" id="textVettore">
                                @Model.Company.RagioneSociale
                            </button>
                        </h2>
                    </div>
                    <!---->
                    @{
                        await Html.RenderPartialAsync("_edit_image", @Model);
                    }
                </div>
            </div>
            @{
                await Html.RenderPartialAsync("_edit_sidebar", @Model);
            }
        </div>

        <div class="col-8">
            <section>
                <!-- Tab links -->
                <div class="tab" style="border:0">
                    <button class="tablinks active" onclick="openTab(event, 'UtentiList')">Dipendenti</button>
                    @if (@Model.Company.ParentID == null && @Model.isExternal == false )
                    {
                        <button class="tablinks" onclick="openTab(event, 'AziendeList')">Aziende Gruppo</button>
                        <button class="tablinks" onclick="openTab(event, 'AziendeList2')">Aziende Inattive</button>
                    }
                </div>
                <div id="AziendeList" class="tabcontent">
                    <div>&nbsp;</div>
                    @{
                        await Html.RenderPartialAsync("_edit_subcompanytab", @Model);
                    }
                </div>
                <div id="AziendeList2" class="tabcontent">
                    <div>&nbsp;</div>
                    @{
                        await Html.RenderPartialAsync("_edit_subcompanyinactive", @Model);
                    }
                </div>
                <div id="UtentiList" class="tabcontent">
                    <div>&nbsp;</div>
                    @{
                        await Html.RenderPartialAsync("_edit_subutentetab", @Model);
                    }
                </div>
            </section>
        </div>
    </div>
</section>


<div id="dnd"></div>




@section Scripts {
    <script>
        function openTab(evt, tabName) {
            // Declare all variables
            var i, tabcontent, tablinks;

            // Get all elements with class="tabcontent" and hide them
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }

            // Get all elements with class="tablinks" and remove the class "active"
            tablinks = document.getElementsByClassName("tablinks");
            if (event != null) {
                for (i = 0; i < tablinks.length; i++) {
                    tablinks[i].className = tablinks[i].className.replace(" active", "");
                }

                // Show the current tab, and add an "active" class to the button that opened the tab             
                evt.currentTarget.className += " active";
            }
            document.getElementById(tabName).style.display = "block";
        }
        openTab(event, 'UtentiList');        
    </script>
}

<style>
    label.country-edit-wrapper {
        background-color: #e9ecef;
        font-weight: 500 !important;
    }

    table#example.dataTable tbody tr.over {
        background-color: #ffa;
    }

        table#example.dataTable tbody tr.over > .sorting_1 {
            background-color: #ffa;
        }

    table#example2.dataTable tbody tr.over {
        background-color: #ffa;
    }

        table#example2.dataTable tbody tr.over > .sorting_1 {
            background-color: #ffa;
        }

</style>
