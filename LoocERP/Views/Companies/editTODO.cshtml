@model LoocERP.ViewModels.EditCompanyViewModel
@{
    ViewData["Title"] = "Azienda - Aggiornato";
}

<link rel="stylesheet" href="~/theme/plugins/jsgrid/jsgrid.min.css">
<link rel="stylesheet" href="~/theme/plugins/jsgrid/jsgrid-theme.min.css">
<link href="~/theme/plugins/tabulator/css/semantic-ui/tabulator_semantic-ui.min.css" rel="stylesheet">
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/v/dt/dt-1.10.18/datatables.min.css" />

<!--Export stuff-->
<script type="text/javascript" src="https://oss.sheetjs.com/sheetjs/xlsx.full.min.js"></script>

<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>Azienda</h1>
            </div>
            <div class="col-sm-6">

            </div>
        </div>
    </div><!-- /.container-fluid -->
</section>

<section class="content">
    <div class="col-12 row">
        <div class="col-4" id="steps">
            @if (Model.Company.ParentID != null)
            {
                var backstr = "";
                if (Model.Company.livello == 1)
                {
                    backstr = "Torna al padre";
                }
                if (Model.Company.livello == 2)
                {
                    backstr = "Torna all'azienda gruppo";
                }
                <div class="card card-primary">
                    <div class="card-header" id="headingOne">
                        <img class="circle_icon" src="/Companies/getCompanyPicture?id=@Model.Company.ID&r=@(Guid.NewGuid())" height="60" />
                        Padre : @Model.Company.Parent.RagioneSociale
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col">
                                <a href="/companies/edit?id=@Model.Company.Parent.ID"><i class="fas fa-angle-left"></i> @backstr</a>
                            </div>
                        </div>
                    </div>
                </div>
            }
            <div class="card card-primary">
                <div class="accordion" id="accordionExample">
                    <div class="card-header" id="headingOne">
                        <h2 class="mb-0">
                            <img class="circle_icon" src="/Companies/getCompanyPicture?id=@Model.Company.ID&r=@(Guid.NewGuid())" height="60" />
                            <button class="btn btn-link" type="button" id="textVettore">
                                @Model.Company.RagioneSociale
                            </button>
                        </h2>
                    </div>
                    <!---->
                    @{
                        await Html.RenderPartialAsync("_edit_image", @Model);
                    }                                  
                </div>
            </div>
            @{
                await Html.RenderPartialAsync("_edit_sidebar", @Model);
            }
        </div>

        <!-- area TAB -->
        <div class="col-8">

            <section>
                <!-- Tab links -->
                <div class="tab" style="border:0">
                    <button class="tablinks" onclick="openTab(event, 'AziendeList')">Aziende Gruppo</button>
                    <button class="tablinks" onclick="openTab(event, 'UtentiList')">Utenti</button>
                </div>
                <!-- Tab content -->
                <div id="AziendeList" class="tabcontent">
                    <div>&nbsp;</div>
                    @{
                        await Html.RenderPartialAsync("_edit_subcompanytab", @Model);
                    }
                </div>

                <div id="UtentiList" class="tabcontent">
                    <div>&nbsp;</div>
                    @{
                        await Html.RenderPartialAsync("_edit_subutentetab", @Model);
                    }
                </div>
            </section>
        </div>
    </div>
</section>


<div id="dnd"></div>




@section Scripts {
    <script>
        function openTab(evt, tabName) {
            // Declare all variables
            var i, tabcontent, tablinks;

            // Get all elements with class="tabcontent" and hide them
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }

            // Get all elements with class="tablinks" and remove the class "active"
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }

            // Show the current tab, and add an "active" class to the button that opened the tab
            document.getElementById(tabName).style.display = "block";
            evt.currentTarget.className += " active";
        }
    </script>
}

<style>
    label.country-edit-wrapper {
        background-color: #e9ecef;
        font-weight: 500 !important;
    }

    table#example.dataTable tbody tr.over {
        background-color: #ffa;
    }

        table#example.dataTable tbody tr.over > .sorting_1 {
            background-color: #ffa;
        }

    table#example2.dataTable tbody tr.over {
        background-color: #ffa;
    }

        table#example2.dataTable tbody tr.over > .sorting_1 {
            background-color: #ffa;
        }



    #tab2 {
        opacity: 1;
        transition: opacity 1s;
    }

        #tab2.d-none {
            opacity: 0;
        }
</style>
