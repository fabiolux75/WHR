@using LoocERP.Controllers
@{
    var idModal = Guid.NewGuid();
    var idTable = Guid.NewGuid();
}


<div class="modal fade" id="@idModal" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title"></h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <div id="tableZone"></div>
            </div>
        </div>
    </div>
</div>

@using (Html.BeginScripts())
{
<script>

    function openVectorHistory(codiceVettore,type) {
        var empModal = $('#@idModal');
        
        if (type == 0) {
            reloadTableVettoriUser(codiceVettore);
            empModal.modal('show');
        }
        if (type == 1) {
            reloadTableVettoriParking(codiceVettore);
            empModal.modal('show');
        }
        if (type == 2) {
            reloadTableVettoriCantieri(codiceVettore);
            empModal.modal('show');
        }

    }

    var dataTable,
        domTable,
        htmlTable = '<table id="@idTable" class="table table-bordered table-hover"><tbody></tbody></table>';


    function reloadTableVettoriUser(codice) {
        const myNode = document.getElementById("tableZone");
        myNode.textContent = '';

        if ($.fn.DataTable.fnIsDataTable(domTable)) {
            dataTable.fnDestroy(true);
            $('#tableZone').append(htmlTable);
        }
        $('#tableZone').append(htmlTable);


         dataTable = $('#@idTable').DataTable({
                ajax: "/Vettore/ajaxVettoriUserHistory?codiceVettore=" + codice,

                dom: 'Bifrtip',//dom: 'Bftp',
                buttons: [
                    'copyHtml5',
                    'excelHtml5',
                    'csvHtml5',
                    'pdfHtml5'
                ],
             columns: [
                 {
                     title : "Nome",
                     "data": "nome"
                 },
                 {
                     title: "Associato dal",
                     "data": "inizio"
                 },
                 {
                     title: "al",
                     "data": "fine"
                 },
                 ],
             columnDefs: [
                 { "name": "engine", "targets": 0 },
                ],
                "language": {
                    "sEmptyTable": "Nessun dato presente nella tabella",
                    "sInfo": "Vista da _START_ a _END_ di _TOTAL_ elementi",
                    "sInfoEmpty": "Vista da 0 a 0 di 0 elementi",
                    "sInfoFiltered": "(filtrati da _MAX_ elementi totali)",
                    "sInfoPostFix": "",
                    "sInfoThousands": ".",
                    "sLengthMenu": "Visualizza _MENU_ elementi",
                    "sLoadingRecords": "Caricamento...",
                    "sProcessing": "Elaborazione...",
                    "sSearch": "Cerca:",
                    "sZeroRecords": "La ricerca non ha portato alcun risultato.",
                    "oPaginate": {
                        "sFirst": "Inizio",
                        "sPrevious": "Precedente",
                        "sNext": "Successivo",
                        "sLast": "Fine"
                    },
                    "oAria": {
                        "sSortAscending": ": attiva per ordinare la colonna in ordine crescente",
                        "sSortDescending": ": attiva per ordinare la colonna in ordine decrescente"
                    }
                },
                initComplete: function () {
                    // Apply the search
                    this.api().columns().every(function () {
                        var that = this;
                        $('input', this.header()).on('keyup change clear', function () {
                            if (that.search() !== this.value) {
                                that
                                    .search(this.value)
                                    .draw();
                            }
                        });
                    });
                },
                "autoWidth": false,
                "responsive": true,
                orderCellsTop: true,
                fixedHeader: true
            });
        $('#tableZone thead tr.rowclone:eq(1) th').each(function (i) {
                var title = $(this).text();
                if (!$(this).hasClass("hide-search")) {
                    $(this).html('<input type="text" placeholder="Cerca ' + title + '" />');
                    $('input', this).on('keyup change', function () {
                        if (table.column(i).search() !== this.value) {
                            table
                                .column(i)
                                .search(this.value)
                                .draw();
                        }
                    });
                }
         });


        //$('#@idTable').DataTable();
        //$('#@idTable').DataTable().clear();
        //$('#@idTable').DataTable().destroy();


    }

    function reloadTableVettoriParking(codice) {
        const myNode = document.getElementById("tableZone");
        myNode.textContent = '';

        if ($.fn.DataTable.fnIsDataTable(domTable)) {
            dataTable.fnDestroy(true);
            $('#tableZone').append(htmlTable);
        }
        $('#tableZone').append(htmlTable);


         dataTable = $('#@idTable').DataTable({
                ajax: "/Vettore/ajaxVettoriParkingHistory?codiceVettore=" + codice,

                dom: 'Bifrtip',//dom: 'Bftp',
                buttons: [
                    'copyHtml5',
                    'excelHtml5',
                    'csvHtml5',
                    'pdfHtml5'
                ],
             columns: [
                 {
                     title : "Nome",
                     "data": "name"
                 },
                 {
                     title: "Nel parcheggio dal",
                     "data": "startDate"
                 }
                 
                 ],
             columnDefs: [
                 { "name": "engine", "targets": 0 },
                ],
                "language": {
                    "sEmptyTable": "Nessun dato presente nella tabella",
                    "sInfo": "Vista da _START_ a _END_ di _TOTAL_ elementi",
                    "sInfoEmpty": "Vista da 0 a 0 di 0 elementi",
                    "sInfoFiltered": "(filtrati da _MAX_ elementi totali)",
                    "sInfoPostFix": "",
                    "sInfoThousands": ".",
                    "sLengthMenu": "Visualizza _MENU_ elementi",
                    "sLoadingRecords": "Caricamento...",
                    "sProcessing": "Elaborazione...",
                    "sSearch": "Cerca:",
                    "sZeroRecords": "La ricerca non ha portato alcun risultato.",
                    "oPaginate": {
                        "sFirst": "Inizio",
                        "sPrevious": "Precedente",
                        "sNext": "Successivo",
                        "sLast": "Fine"
                    },
                    "oAria": {
                        "sSortAscending": ": attiva per ordinare la colonna in ordine crescente",
                        "sSortDescending": ": attiva per ordinare la colonna in ordine decrescente"
                    }
                },
                initComplete: function () {
                    // Apply the search
                    this.api().columns().every(function () {
                        var that = this;
                        $('input', this.header()).on('keyup change clear', function () {
                            if (that.search() !== this.value) {
                                that
                                    .search(this.value)
                                    .draw();
                            }
                        });
                    });
                },
                "autoWidth": false,
                "responsive": true,
                orderCellsTop: true,
                fixedHeader: true
            });
        $('#tableZone thead tr.rowclone:eq(1) th').each(function (i) {
                var title = $(this).text();
                if (!$(this).hasClass("hide-search")) {
                    $(this).html('<input type="text" placeholder="Cerca ' + title + '" />');
                    $('input', this).on('keyup change', function () {
                        if (table.column(i).search() !== this.value) {
                            table
                                .column(i)
                                .search(this.value)
                                .draw();
                        }
                    });
                }
        });

    }
    
    function reloadTableVettoriCantieri(codice) {
        const myNode = document.getElementById("tableZone");
        myNode.textContent = '';

        if ($.fn.DataTable.fnIsDataTable(domTable)) {
            dataTable.fnDestroy(true);
            $('#tableZone').append(htmlTable);
        }
        $('#tableZone').append(htmlTable);


         dataTable = $('#@idTable').DataTable({
                ajax: "/Vettore/ajaxVettoriCantiereHistory?codiceVettore=" + codice,

                dom: 'Bifrtip',//dom: 'Bftp',
                buttons: [
                    'copyHtml5',
                    'excelHtml5',
                    'csvHtml5',
                    'pdfHtml5'
                ],
             columns: [
                 {
                     title : "Nome",
                     "data": "name"
                 },
                 {
                     title: "Nel cantiere dal",
                     "data": "from"
                 },
                 
                 {
                     title: "al",
                     "data": "to"
                 }
                 
                 ],
             columnDefs: [
                 { "name": "engine", "targets": 0 },
                ],
                "language": {
                    "sEmptyTable": "Nessun dato presente nella tabella",
                    "sInfo": "Vista da _START_ a _END_ di _TOTAL_ elementi",
                    "sInfoEmpty": "Vista da 0 a 0 di 0 elementi",
                    "sInfoFiltered": "(filtrati da _MAX_ elementi totali)",
                    "sInfoPostFix": "",
                    "sInfoThousands": ".",
                    "sLengthMenu": "Visualizza _MENU_ elementi",
                    "sLoadingRecords": "Caricamento...",
                    "sProcessing": "Elaborazione...",
                    "sSearch": "Cerca:",
                    "sZeroRecords": "La ricerca non ha portato alcun risultato.",
                    "oPaginate": {
                        "sFirst": "Inizio",
                        "sPrevious": "Precedente",
                        "sNext": "Successivo",
                        "sLast": "Fine"
                    },
                    "oAria": {
                        "sSortAscending": ": attiva per ordinare la colonna in ordine crescente",
                        "sSortDescending": ": attiva per ordinare la colonna in ordine decrescente"
                    }
                },
                initComplete: function () {
                    // Apply the search
                    this.api().columns().every(function () {
                        var that = this;
                        $('input', this.header()).on('keyup change clear', function () {
                            if (that.search() !== this.value) {
                                that
                                    .search(this.value)
                                    .draw();
                            }
                        });
                    });
                },
                "autoWidth": false,
                "responsive": true,
                orderCellsTop: true,
                fixedHeader: true
            });
        $('#tableZone thead tr.rowclone:eq(1) th').each(function (i) {
                var title = $(this).text();
                if (!$(this).hasClass("hide-search")) {
                    $(this).html('<input type="text" placeholder="Cerca ' + title + '" />');
                    $('input', this).on('keyup change', function () {
                        if (table.column(i).search() !== this.value) {
                            table
                                .column(i)
                                .search(this.value)
                                .draw();
                        }
                    });
                }
        });

    }

</script>
}